import json
import time
import requests
import schedule

# === Chargement de la configuration ===
try:
    with open("config.json", "r") as f:
        config = json.load(f)
        TOKEN = config["telegram_token"]
        CHAT_ID = config["telegram_chat_id"]
        INTERVAL = config.get("update_interval_minutes", 10)
except Exception as e:
    print(f"‚ùå Erreur de chargement du fichier config.json : {e}")
    exit()

# === Fonction pour envoyer un message Telegram ===
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": message}
    try:
        response = requests.post(url, data=data)
        if response.status_code != 200:
            print(f"‚ö†Ô∏è Erreur Telegram : {response.text}")
    except Exception as e:
        print(f"‚ùå Impossible d'envoyer le message Telegram : {e}")

# === Message de d√©marrage ===
print("üîç D√©marrage du bot A+...")
send_telegram_message("ü§ñ Bot A+ est bien en ligne et pr√™t √† surveiller le march√© !")

# === Exemple de fonction d‚Äôanalyse fictive ===
def check_market_updates():
    print("üìä Analyse du march√© en cours...")
    # Simule une mise √† jour : ici, tu pourras plus tard ajouter les vraies analyses
    # (ex: r√©cup√©ration du prix via ccxt, d√©tection de signaux, etc.)
    fake_signal = "Aucun signal fort d√©tect√© pour le moment."
    send_telegram_message(f"üìà Mise √† jour automatique : {fake_signal}")

# === Planification de la t√¢che ===
schedule.every(INTERVAL).minutes.do(check_market_updates)
print(f"‚è±Ô∏è Mises √† jour pr√©vues toutes les {INTERVAL} minutes.")

# === Boucle principale ===
while True:
    schedule.run_pending()
    time.sleep(5)
